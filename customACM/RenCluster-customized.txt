import PT_PC_UTIL:StringMap;
import PTEM_CONFIG:PTEMHelpMessage;
import PTEM_CONFIG:PTEMVariableProperty;
import PTEM_CONFIG:EMConfigurationPlugin;
import PTEM_CONFIG:ConfigurationFromRecordSet;


class PTRenServerCluster extends PTEM_CONFIG:EMConfigurationPlugin
   method getPluginHelpMessage() Returns PTEM_CONFIG:PTEMHelpMessage;
   method getProperties() Returns array of PTEM_CONFIG:PTEMVariableProperty;
   method validateVariables(&variables As PT_PC_UTIL:StringMap, &plugin As string) Returns array of PTEM_CONFIG:PTEMHelpMessage;
   method configureEnvironment(&variables As PT_PC_UTIL:StringMap, &plugin As string) Returns array of PTEM_CONFIG:PTEMHelpMessage;
   method getCurrentConfiguration(&variables As array of PT_PC_UTIL:StringMap, &plugin As string) Returns array of PT_PC_UTIL:StringMap;
   
   method validateConfigurations(&variables As PT_PC_UTIL:StringMap, &plugin As string) Returns array of PTEM_CONFIG:PTEMHelpMessage;
   method dependant_plugins() Returns array of string;
   method isInternalPlugin() Returns boolean;
private
   method property_map_func() Returns array of array of array of string
end-class;

method getPluginHelpMessage
   /+ Returns PTEM_CONFIG:PTEMHelpMessage +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.getPluginHelpMessage +/
   Local PTEM_CONFIG:PTEMHelpMessage &tempMessage = Null;
   &tempMessage = create PTEM_CONFIG:PTEMHelpMessage(0, 0, "Plugin to configure a new Renserver Cluster Definition", Null);
   rem &tempMessage = create PTEM_CONFIG:PTEMHelpMessage(0, 0, "", Null);
   Return &tempMessage;
end-method;

method property_map_func
   /+ Returns Array3 of String +/
   
   Local array of array of array of string &properties;
   &properties = CreateArrayRept(CreateArrayRept(CreateArrayRept("", 0), 0), 0);
   &properties.Push("PSMCFRENURLID");
   &properties [1][1].Push("");
   &properties [1].Push(CreateArray("MCFREN_URL_ID", "env.ren_cluster_id", "string", "false", ""));
   &properties [1].Push(CreateArray("ACTIVE_FLAG", "env.ren_state_flag", "char", "false", ""));
   &properties [1].Push(CreateArray("REN_CLUS_ROOT_PATH", "env.cluster_root_path", "string", "false", ""));
   &properties [1].Push(CreateArray("MCFREN_INT_URL", "env.cluster_url", "string", "false", ""));
   &properties [1].Push(CreateArray("MCFREN_BROWSER_URL", "env.browser_url", "string", "false", ""));
   &properties [1].Push(CreateArray("AUTHTOKEN", "env.auth_domain", "string", "false", ""));
   Return &properties;
end-method;

method getProperties
   /+ Returns Array of PTEM_CONFIG:PTEMVariableProperty +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.getProperties +/
   
   Local array of PTEM_CONFIG:PTEMVariableProperty &propArray = Null;
   Local PTEM_CONFIG:PTEMVariableProperty &variableproperty;
   &propArray = CreateArrayRept(&variableproperty, 0);
   
   REM - Shands David Miller - replaced creating variables by record properties to self defined variables. Needed a way to get the REN_ID field value which was not in the original content 
   rem   Local object &obj = Null;
   rem   Local string &plug = Split(String(%This), ":").Pop();
   rem   Local array of array of array of string &properties;
   rem   &properties = %This.property_map_func();
   rem   &obj = create PTEM_CONFIG:ConfigurationFromRecordSet(&plug, &properties);
   rem   &propArray = &obj.getProperties();
   rem	 END of COMMENTING out of delivered and beginning of custom;
   
   rem   Start of creating self defined variables;
   
   &variableproperty = create PTEM_CONFIG:PTEMVariableProperty("env.ren_cluster_id", "string", False, False, "", 0, 0, "RenCluster ID", Null);
   &propArray = CreateArray(&variableproperty);
   &variableproperty = create PTEM_CONFIG:PTEMVariableProperty("env.ren_state_flag", "char", False, False, "", 0, 0, "RenCluster state flag", Null);
   &propArray.Push(&variableproperty);
   &variableproperty = create PTEM_CONFIG:PTEMVariableProperty("env.cluster_root_path", "string", False, False, "", 0, 0, "RenCluster root path", Null);
   &propArray.Push(&variableproperty);
   &variableproperty = create PTEM_CONFIG:PTEMVariableProperty("env.cluster_url", "string", False, False, "", 0, 0, "RenCluster URL", Null);
   &propArray.Push(&variableproperty);
   &variableproperty = create PTEM_CONFIG:PTEMVariableProperty("env.browser_url", "string", False, False, "", 0, 0, "RenCluster Browser URL", Null);
   &propArray.Push(&variableproperty);
   &variableproperty = create PTEM_CONFIG:PTEMVariableProperty("env.auth_domain", "string", False, False, "", 0, 0, "RenCluster Auth Domain", Null);
   &propArray.Push(&variableproperty);
   &variableproperty = create PTEM_CONFIG:PTEMVariableProperty("env.ren_id", "string", False, False, "", 0, 0, "RenServer ID", Null);
   &propArray.Push(&variableproperty);
   
   REM - END Shands David Miller;
   
   Return &propArray;
end-method;

method validateVariables
   /+ &variables as PT_PC_UTIL:StringMap, +/
   /+ &plugin as String +/
   /+ Returns Array of PTEM_CONFIG:PTEMHelpMessage +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.validateVariables +/
   Return Null;
end-method;

method configureEnvironment
   /+ &variables as PT_PC_UTIL:StringMap, +/
   /+ &plugin as String +/
   /+ Returns Array of PTEM_CONFIG:PTEMHelpMessage +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.configureEnvironment +/
   Local integer &i, &j;
   Local array of array of array of string &properties;
   Local string &record, &recname, &field, &fieldname, &condition, &sqlstring;
   Local Record &rec;
   Local Field &recfield;
   Local SQL &SQL;
   Local boolean &ret;
   If %This.hasAccess() = False Then
      Return Null;
   End-If;
   Local object &obj = Null;
   &properties = %This.property_map_func();
   &obj = create PTEM_CONFIG:ConfigurationFromRecordSet(Split(String(&plugin), ":").Pop(), &properties);
   &obj.configurePlugin(&variables);
   Local boolean &updtflag;
   Local string &cluster_id = &variables.get("env.ren_cluster_id");
   Local string &ren_id = &variables.get("env.ren_id");
   Local string &process_instance = &variables.get("env.process_inst");
   
   Local Record &renclstr = CreateRecord(Record.PSRENCLUSTER);
   &renclstr.MCFREN_URL_ID.Value = &cluster_id;
   &renclstr.REN_ID.Value = &ren_id;
   &updtflag = &renclstr.SelectByKey();
   
   If &updtflag Then
      &renclstr.Update();
      
   Else
      &renclstr.MCFREN_URL_ID.Value = &cluster_id;
      &renclstr.REN_ID.Value = &ren_id;
      &renclstr.Insert();
   End-If;
   
   Local Record &prinst = CreateRecord(Record.PSREN);
   &prinst.REN_ID.Value = &ren_id;
   &updtflag = &prinst.SelectByKey();
   If &updtflag Then
      &prinst.PROCESS_INST.Value = &process_instance;
      &prinst.Update();
      
   Else
      &prinst.REN_ID.Value = &ren_id;
      &prinst.PROCESS_INST.Value = &process_instance;
      &prinst.Insert();
   End-If;
   
   
   Local Record &renowner = CreateRecord(Record.PSRENCLUS_OWNER);
   &renowner.MCFREN_URL_ID.Value = &cluster_id;
   &updtflag = &renowner.SelectByKey();
   If &updtflag Then
      &renowner.RENOWNER.Value = "A";
      &renowner.Update();
   Else
      &renowner.MCFREN_URL_ID.Value = &cluster_id;
      &renowner.RENOWNER.Value = "A";
      &renowner.Insert();
   End-If;
   
   
   
   
   Return Null;
end-method;

method validateConfigurations
   /+ &variables as PT_PC_UTIL:StringMap, +/
   /+ &plugin as String +/
   /+ Returns Array of PTEM_CONFIG:PTEMHelpMessage +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.validateConfigurations +/
   If %This.hasAccess() = False Then
      Return Null;
   End-If;
   
   Local array of PTEM_CONFIG:PTEMHelpMessage &helpMsgArray = Null;
   Local PTEM_CONFIG:PTEMHelpMessage &tempMessage;
   &helpMsgArray = CreateArrayRept(&tempMessage, 0);
   
   Local array of PTEM_CONFIG:PTEMHelpMessage &tempMsgArray = Null;
   Local object &obj = Null;
   Local array of array of array of string &properties;
   &properties = %This.property_map_func();
   &obj = create PTEM_CONFIG:ConfigurationFromRecordSet(Split(String(&plugin), ":").Pop(), &properties);
   &tempMsgArray = &obj.validateProperties(&variables);
   
   If &tempMsgArray <> Null Then
      &helpMsgArray.Push(&tempMsgArray);
   End-If;
   Return &helpMsgArray;
end-method;

method getCurrentConfiguration
   /+ &variables as Array of PT_PC_UTIL:StringMap, +/
   /+ &plugin as String +/
   /+ Returns Array of PT_PC_UTIL:StringMap +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.getCurrentConfiguration +/
   Local SQL &sql;
   Local boolean &bb;
   Local integer &cnt, &count;
   &count = 0;
   Local integer &ctt = 1;
   Local string &cluster_id;
   Local string &cluster_url;
   Local string &browser_url;
   Local string &auth_domain;
   Local string &root_path;
   Local string &state_flag;
   
   
   &sql = CreateSQL("SELECT MCFREN_URL_ID FROM PSMCFRENURLID", &cluster_id);
   
   While &sql.Fetch(&cluster_id)
      
      SQLExec("SELECT MCFREN_INT_URL, MCFREN_BROWSER_URL, AUTHTOKEN, REN_CLUS_ROOT_PATH, ACTIVE_FLAG FROM PSMCFRENURLID WHERE MCFREN_URL_ID = :1", &cluster_id, &cluster_url, &browser_url, &auth_domain, &root_path, &state_flag);
      
      
      &variables [&ctt] = create PT_PC_UTIL:StringMap();
      
      &variables [&ctt].put("env.ren_cluster_id", &cluster_id);
      &variables [&ctt].put("env.ren_state_flag", &state_flag);
      &variables [&ctt].put("env.cluster_root_path", &root_path);
      &variables [&ctt].put("env.cluster_url", &cluster_url);
      &variables [&ctt].put("env.browser_url", &browser_url);
      &variables [&ctt].put("env.auth_domain", &auth_domain);
      &variables [&ctt].put("env.ren_state_flag", &state_flag);
      
      &ctt = &ctt + 1;
      
   End-While;
   Return &variables;
end-method;

method dependant_plugins
   /+ Returns Array of String +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.dependant_plugins +/
   Local array of string &dependant_array;
   &dependant_array = CreateArray("");
   Return &dependant_array;
end-method;

method isInternalPlugin
   /+ Returns Boolean +/
   /+ Extends/implements PTEM_CONFIG:EMConfigurationPlugin.isInternalPlugin +/
   Return False;
end-method;

